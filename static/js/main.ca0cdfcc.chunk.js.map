{"version":3,"sources":["services/DataManagerContext.js","App.js","components/FoodTable.js","components/Filters.js","components/Search.js","reportWebVitals.js","index.js"],"names":["FiltersContext","createContext","arrayMin","arr","reduce","p","v","arrayMax","Provider","Component","useDataManager","useContext","renderHighlightedText","text","searchFilter","length","parts","split","RegExp","map","part","i","style","toLowerCase","fontWeight","renderColumns","title","dataIndex","key","render","record","index","thereIsAprox","aproximari","aprox","InfoCircleOutlined","renderedAprox","renderAliment","sorter","compare","a","b","calorii","multiple","proteine","lipide","carbohidrati","fibre","FoodTable","data","columns","dataSource","Filters","categories","selectedCategoriesFilter","caloriesRange","proteinsRange","carbsRange","fatsRange","fibresRange","setFatsFilter","setFibresFilter","setSelectedCategoriesFilter","setCaloriesFilter","setProteinsFilter","setCarbsFilter","maximums","allCategoriesChecked","categoriesCheckIndeterminate","checkAll","percentileTip","value","className","indeterminate","onChange","e","cats","target","checked","Group","options","defaultValue","range","tooltipVisible","onAfterChange","max","fats","tipFormatter","carbs","calories","proteins","fibres","Search","setSearchFilter","placeholder","debounce","Content","Layout","Sider","enhance","children","entry","Math","floor","min","Array","from","Set","categorie","useState","entries","setEntries","minCalories","maxCalories","minProteins","maxProteins","minCarbs","maxCarbs","minFats","maxFats","minFibres","maxFibres","caloriesFilter","proteinsFilter","carbsFilter","fatsFilter","fibresFilter","useEffect","filteredEntries","filters","searchTerm","filter","includesSearchTerm","test","aliment","includes","filterEntries","context","backgroundColor","padding","width","direction","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca0cdfcc.chunk.js","sourcesContent":["import { createContext, useContext, useEffect, useState } from 'react';\nimport data from '../data/data';\n\nconst FiltersContext = createContext({})\n\nfunction arrayMin(arr) {\n  return arr.reduce(function (p, v) {\n    return ( p < v ? p : v );\n  }, []);\n}\n\nfunction arrayMax(arr) {\n  return arr.reduce(function (p, v) {\n    return ( p > v ? p : v );\n  }, []);\n}\n\nconst filterEntries = ({ entries, filters }) => {\n  const {\n    categories,\n    caloriesRange,\n    proteinsRange,\n    carbsRange,\n    fatsRange,\n    fibresRange,\n    searchTerm,\n  } = filters;\n\n  return entries.filter(entry => {\n\n    const includesSearchTerm = searchTerm.length > 0 ? RegExp(searchTerm.toLowerCase()).test(entry.aliment.toLowerCase()) : true;\n    \n    return categories.includes(entry.categorie) &&\n    +entry.calorii >= caloriesRange[0] &&\n    +entry.calorii <= caloriesRange[1] &&\n    +entry.proteine >= proteinsRange[0] &&\n    +entry.proteine <= proteinsRange[1] &&\n    +entry.carbohidrati >= carbsRange[0] &&\n    +entry.carbohidrati <= carbsRange[1] &&\n    +entry.lipide >= fatsRange[0] &&\n    +entry.lipide <= fatsRange[1] &&\n    +entry.fibre >= fibresRange[0] &&\n    +entry.fibre <= fibresRange[1] &&\n    includesSearchTerm\n  }\n    \n  )\n}\n\nexport const DataManagerContext = ({ children }) => {\n\n  const maximums = {\n    calories: arrayMax(data.map(entry=> Math.floor(entry.calorii))),\n    proteins: Math.min(50, arrayMax(data.map(entry=> Math.floor(entry.proteine)))),\n    carbs: Math.min(50, arrayMax(data.map(entry=> Math.floor(entry.carbohidrati)))),\n    fats: Math.min(50, arrayMax(data.map(entry=> Math.floor(entry.lipide)))),\n    fibres: Math.min(50, arrayMax(data.map(entry=> Math.floor(entry.fibre)))),\n  }\n\n  const categories = Array.from(new Set(data.map(entry => entry.categorie)));\n\n  const [entries, setEntries] = useState(data)\n\n  const minCalories = arrayMin(entries.map(entry=> Math.floor(entry.calorii)));\n  const maxCalories = arrayMax(entries.map(entry=> Math.floor(entry.calorii)));\n  const minProteins = arrayMin(entries.map(entry=> Math.floor(entry.proteine)));\n  const maxProteins = Math.min(50, arrayMax(entries.map(entry=> Math.floor(entry.proteine))));\n  const minCarbs = arrayMin(entries.map(entry=> Math.floor(entry.carbohidrati)));\n  const maxCarbs = Math.min(50, arrayMax(entries.map(entry=> Math.floor(entry.carbohidrati))));\n  const minFats = arrayMin(entries.map(entry=> Math.floor(entry.lipide)));\n  const maxFats = Math.min(50, arrayMax(entries.map(entry=> Math.floor(entry.lipide))));\n  const minFibres = arrayMin(entries.map(entry=> Math.floor(entry.fibre)));\n  const maxFibres = Math.min(50, arrayMax(entries.map(entry=> Math.floor(entry.fibre))));\n\n  const [selectedCategoriesFilter, setSelectedCategoriesFilter] = useState(categories)\n  const [caloriesFilter, setCaloriesFilter] = useState([minCalories, maxCalories])\n  const [proteinsFilter, setProteinsFilter] = useState([minProteins, maxProteins])\n  const [carbsFilter, setCarbsFilter] = useState([minCarbs, maxCarbs])\n  const [fatsFilter, setFatsFilter] = useState([minFats, maxFats])\n  const [fibresFilter, setFibresFilter] = useState([minFibres, maxFibres])\n  const [searchFilter, setSearchFilter] = useState('')\n\n  useEffect(() => {\n    const filteredEntries = filterEntries({entries: data, filters: {\n      categories: selectedCategoriesFilter,\n      caloriesRange: caloriesFilter,\n      proteinsRange: proteinsFilter,\n      carbsRange: carbsFilter,\n      fatsRange: fatsFilter,\n      fibresRange: fibresFilter,\n      searchTerm: searchFilter,\n    }})\n    setEntries(filteredEntries)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n      selectedCategoriesFilter,\n      caloriesFilter,\n      proteinsFilter,\n      carbsFilter,\n      searchFilter,\n      fatsFilter,\n      fibresFilter,\n    ])\n\n  const context = {\n    data: entries,\n    categories,\n    selectedCategoriesFilter,\n    caloriesRange: [minCalories, maxCalories],\n    proteinsRange: [minProteins, maxProteins],\n    carbsRange: [minCarbs, maxCarbs],\n    fatsRange: [minFats, maxFats],\n    fibresRange: [minFibres, maxFibres],\n    maximums,\n    searchFilter,\n    setSelectedCategoriesFilter,\n    setCaloriesFilter,\n    setProteinsFilter,\n    setCarbsFilter,\n    setSearchFilter,\n    setFatsFilter,\n    setFibresFilter,\n  }\n\n  return (\n    <FiltersContext.Provider value={context}>\n      { children }\n    </FiltersContext.Provider>\n  )\n}\n\nexport const useDataManager = () => useContext(FiltersContext)","import { Layout, Space } from 'antd';\nimport { FoodTable, Filters, Search } from './components';\nimport { DataManagerContext } from './services' \n\nimport 'antd/dist/antd.min.css';\nimport './App.css';\n\nconst { Content, Sider } = Layout;\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Sider style={{ backgroundColor: \"white\" }}>\n          <Filters />  \n        </Sider>\n        <Content style={{ padding: '25px 100px' }}>\n          <Space style={{ width: '100%' }} direction=\"vertical\">\n            <Search />\n            <FoodTable />\n          </Space>\n        </Content>\n      </Layout>\n    </div>\n  );\n}\n\nconst enhance = (Provider, Component) => props => (\n  <Provider>\n    <Component {...props} />\n  </Provider>\n);\n\nexport default enhance(DataManagerContext, App);\n","import { Fragment } from 'react';\nimport { Table, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport { useDataManager } from '../services'\n\nconst renderHighlightedText = (text, searchFilter) => {\n  if (searchFilter.length === 0) return text\n\n  const parts = text.split(new RegExp(`(${searchFilter})`, 'gi'));\n\n  return <Fragment> { parts.map((part, i) => \n      <span key={i} style={part.toLowerCase() === searchFilter.toLowerCase() ? { fontWeight: 'bold' } : {} }>\n          { part }\n      </span>)\n  } </Fragment>;\n}\n\nconst renderAliment = (searchFilter, text, record) => {\n  const thereIsAprox = record.aproximari && record.aproximari.length > 0\n  const aprox = ( \n    <Tooltip title={record.aproximari}>\n      <InfoCircleOutlined />\n    </Tooltip>\n    )\n  const renderedAprox = thereIsAprox ? aprox : null;\n\n  return (\n    <Fragment>\n      {renderHighlightedText(text, searchFilter)} {renderedAprox}\n    </Fragment>\n  )\n}\n\nconst renderColumns = searchFilter => {\n\n  return [\n    {\n      title: 'Aliment (100g)',\n      dataIndex: 'aliment',\n      key: 'aliment',\n      render: (text, record, index) => renderAliment(searchFilter, text, record, index),\n    },\n    {\n      title: 'Calorii (c)',\n      dataIndex: 'calorii',\n      key: 'calorii',\n      sorter: {\n        compare: (a, b) => a.calorii - b.calorii,\n        multiple: 1,\n      },\n    },\n    {\n      title: 'Proteine (%)',\n      dataIndex: 'proteine',\n      key: 'proteine',\n      sorter: {\n        compare: (a, b) => a.proteine - b.proteine,\n        multiple: 2,\n      },\n    },\n    {\n      title: 'Grasimi (%)',\n      dataIndex: 'lipide',\n      key: 'lipide',\n      sorter: {\n        compare: (a, b) => a.lipide - b.lipide,\n        multiple: 3,\n      },\n    },\n    {\n      title: 'Carbohidrati (%)',\n      dataIndex: 'carbohidrati',\n      key: 'carbohidrati',\n      sorter: {\n        compare: (a, b) => a.carbohidrati - b.carbohidrati,\n        multiple: 4,\n      },\n    },\n    {\n      title: 'Fibre (%)',\n      dataIndex: 'fibre',\n      key: 'fibre',\n      sorter: {\n        compare: (a, b) => a.fibre - b.fibre,\n        multiple: 5,\n      },\n    }\n  ]\n\n}\n\nexport const FoodTable = () => {\n  const { data, searchFilter } = useDataManager();\n  const columns = renderColumns(searchFilter)\n  return (\n    <Table columns={columns} dataSource={data} />\n  );\n}\n","import { Fragment } from 'react';\nimport { Slider, Card, Checkbox } from 'antd';\nimport { useDataManager } from '../services'\nexport const Filters = () => {\n  const {\n    categories,\n    selectedCategoriesFilter,\n    caloriesRange,\n    proteinsRange,\n    carbsRange,\n    fatsRange,\n    fibresRange,\n    setFatsFilter,\n    setFibresFilter,\n    setSelectedCategoriesFilter,\n    setCaloriesFilter,\n    setProteinsFilter,\n    setCarbsFilter,\n    maximums,\n  } = useDataManager()\n\n  const allCategoriesChecked = categories.length === selectedCategoriesFilter.length\n  const categoriesCheckIndeterminate = \n    categories.length !== selectedCategoriesFilter.length &&\n    selectedCategoriesFilter.length > 0\n\n  const handleCheckAll = e => {\n    const cats = e.target.checked ? categories : []\n    setSelectedCategoriesFilter(cats)\n  }  \n\n  const checkAll = allCategoriesChecked ? 'Debifeaza toate': 'Bifeaza toate'\n\n  const percentileTip = value => `${value}%`\n  const gramsTip = value => `${value}g`\n\n  return (\n      <Fragment>\n        <Card title=\"Categorii\">\n          <div className=\"site-checkbox-all-wrapper\">\n            <Checkbox\n              indeterminate={categoriesCheckIndeterminate}\n              onChange={handleCheckAll}\n              checked={allCategoriesChecked}\n            >\n              {checkAll}\n            </Checkbox>\n          </div>\n          <Checkbox.Group \n            options={categories}\n            defaultValue={categories}\n            value={selectedCategoriesFilter}\n            onChange={setSelectedCategoriesFilter}\n          />\n\n        </Card>\n        <Card title=\"Grasimi\">\n          <Slider\n            range\n            defaultValue={fatsRange}\n            tooltipVisible\n            onAfterChange={setFatsFilter}\n            max={maximums.fats}\n            tipFormatter={percentileTip}\n          />\n        </Card>\n        <Card title=\"Carbohidrati\">\n          <Slider\n            range\n            defaultValue={carbsRange}\n            tooltipVisible\n            onAfterChange={setCarbsFilter}\n            max={maximums.carbs}\n            tipFormatter={percentileTip}\n          />\n        </Card>\n        <Card title=\"Calorii\">\n          <Slider\n            range\n            defaultValue={caloriesRange}\n            tooltipVisible\n            onAfterChange={setCaloriesFilter}\n            max={maximums.calories}\n            tipFormatter={gramsTip}\n          />\n        </Card>\n        <Card title=\"Proteine\">\n          <Slider\n            range\n            defaultValue={proteinsRange}\n            tooltipVisible\n            onAfterChange={setProteinsFilter}\n            max={maximums.proteins}\n            tipFormatter={percentileTip}\n          />\n        </Card>\n        <Card title=\"Fibre\">\n          <Slider\n            range\n            defaultValue={fibresRange}\n            tooltipVisible\n            onAfterChange={setFibresFilter}\n            max={maximums.fibres}\n            tipFormatter={percentileTip}\n          />\n        </Card>\n      </Fragment>\n\n  )\n}","import { Input } from 'antd';\nimport { debounce } from 'lodash';\nimport { useDataManager } from '../services';\n\nexport const Search = () => {\n  const {\n    setSearchFilter,\n  } = useDataManager()\n\n  const handleOnChange = e => {\n    setSearchFilter(e.target.value)\n  }\n\n  return (\n    <Input placeholder=\"Cauta Aliment\" onChange={debounce(handleOnChange, 300)}  />\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}